//Создать три будильника которые начинают работать одновременно.
//Но первый будильник прозвенит через 5 секунд, второй - через 7,
//третий - через 10 секунд. После начала работы каждый из
//будильников каждую секунду производит только ему присущий звук.
//После того, как будильник прозвенит, он перестает тикать.

//Функция coroutineScope(), которая создает область корутин,
//будет ожидать завершения всех определенных в этой области корутин.
//То есть функция mainзавершит выполнение, когда будут завершены обе корутины
suspend fun main() {
    val Alarm1 = coroutineScope { // функция создает область корутин и ожидает завершения всех определенных в этой области корутин
        launch{   //launch запускает каждую корутину параллельно с остальным кодом
            delay(5000) // задерживание 5 секунд
            repeat(5) {
                println("Five!")
                delay(1000)
            }
        }
    }
    val Alarm2 = coroutineScope {
        launch {
            delay(7000) // задерживание 7 секунд
            repeat(7) {
                println("Seven!")
                delay(1000)
            }
        }
    }
    val Alarm3 = coroutineScope {
        launch {
            delay(10000) // задерживание 10 секунд
            repeat(10) {
                println("Ten!")
                delay(1000)
            }
        }
    }

    runBlocking {
        joinAll(Alarm1, Alarm2, Alarm3) // функция для завершения всех будильников
    }
}
